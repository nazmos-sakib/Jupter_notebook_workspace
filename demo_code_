
-----------------------------------------------------------------------------------------
#suffle the data set

np.random.seed(40)
df = data_frame.reindex(np.random.permutation(data_frame.index))
df.reset_index(inplace=True,drop=True)
data_frame = shuffle(data_frame)	
-------------------------------------------------------------------------------------------
#drop a colum

df.drop('Age',1,inplace=True) 
missing_median(df,'column_name')
------------------------------------------------------------------------------------------

df.head(2)

-------------------------------------------------------------------------------------------

data_frame = pd.read_csv('data.tab', sep='\t')
data_frame = pd.read_csv('./data-withoutapp.csv',na_values=['NA','?']) # replace missin value with NaN

len(data_frame)
data_frame.shape
print (data_frame.isnull().values.any())

------------------------------------------------------------------------------------

# split into train and test sets
train_size = int(len(data_set) * 0.75)
test_size = len(data_set) - train_size   
train, test = data_set[0:train_size,:], data_set[train_size:len(data_set),:]

print(len(train), len(test))

------------------------------------------------------------------------------------------
X_train = train[:,:13]
Y_train = train[:,13:]

X_test = test[:,:13]
Y_test = test[:,13:]

-----------------------------------------------------------------------------------------------

model = Sequential([
    Dense(16,input_shape=(14,),activation="relu"),
    Dense(32,activation="relu"),
    Dense(32,activation="relu"),
    Dense(54,activation="relu"),
    Dense(2,activation="softmax")
    
])

model.summary()

model.compile(
    Adam(lr=.0001),loss='sparse_categorical_crossentropy',metrics=['accuracy']
)


----------------------------------------------------------------------------------------------------
y_test = np.argmax(pred,axis=1) ///multi dimention turn in to 1D 

score = metrics.accuracy_score(y_test,pred)
score = metrics.mean_squared_error(y_test,pred) ///for regression

print (score)

--------------------------------------------------------------------------------------------

#classification report using sklearn.matrics.

from sklearn.metrics import classification_report

terget_name = ["all","the","lables"]

classification_report(actual_y,predicted_y,terget_names=terget_names)
-----------------------------------------------------------------------------------------------

from sklearn.crossvalidation import cross_val_score

score = cross_val_score(model,x,y,cv=10scoring="accuracy")
print(score)
print (score.mean()) #use average accuracy as an estimate of the out-of-sample accuracy

--------------------------------------------------------------------------------------------------